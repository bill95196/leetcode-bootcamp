
// first try, O(n^2); time limit
class Solution:
    def maxArea(self, height: List[int]) -> int:
        max_area = 0
        for i in range(len(height)):
            for j in range(i+1,len(height)):
                m_area = (j -i)*min(height[i],height[j])
                max_area = max(max_area, m_area)
        return max_area

// O(n^2)



//second; use two pointers
class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0
        right = len(height)-1
        max_area = 0
        while left < right:
            m_area = (right - left)*min(height[left],height[right])
            max_area = max(max_area, m_area)
            if height[left] < height[right]:
                left+=1
            else:
                right-=1
        return max_area

//



